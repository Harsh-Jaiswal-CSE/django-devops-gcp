name: CI/CD to GKE
on:
  push:
    branches:
      - main
      - master

env:
  REGION: us-central1
  REPOSITORY: django-repo
  IMAGE_NAME: django-celery-app

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up gcloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set gcloud project
        run: |
          gcloud config set project ${{ secrets.GCP_PROJECT }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Debug - Check Dockerfile presence and content
        run: |
          echo "Working directory: $(pwd)"
          echo "=== All files in current directory ==="
          ls -la
          echo "=== All files recursively ==="
          find . -name "*ockerfile*" -o -name "*dockerfile*" 2>/dev/null || echo "No Dockerfile found"
          echo "=== Check if Dockerfile exists specifically ==="
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile exists"
            echo "--- Dockerfile content (first 10 lines) ---"
            head -10 Dockerfile
            echo "--- Dockerfile size ---"
            ls -lh Dockerfile
          else
            echo "❌ Dockerfile not found in $(pwd)"
          fi
          echo "=== Git status ==="
          git status

      - name: Build and Push Docker Image
        run: |
          set -e
          IMAGE="${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo "Building Docker image: $IMAGE"
          # If Dockerfile is in a subdirectory, change the path:
          # docker build -f path/to/Dockerfile -t "$IMAGE" .
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Deploy to GKE
        run: |
          gcloud container clusters get-credentials django-celery-minimal \
            --zone ${{ env.REGION }}-c \
            --project ${{ secrets.GCP_PROJECT }}
          kubectl cluster-info
          kubectl get nodes
          kubectl set image deployment/django-web django-web=$IMAGE
          kubectl rollout status deployment/django-web
